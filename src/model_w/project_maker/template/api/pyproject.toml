[project]
requires-python = ">=3.11"

[tool.poetry]
name = "~~~project_name__snake~~~"
version = "0.1.0"
description = ""
authors = ["___dev_id___"]
license = "Proprietary"

packages = [
    {include = "___project_name__snake___"},
]

[tool.poetry.dependencies]
python = "~3.11"
modelw-preset-django = {extras = [
    "health",
    # :: IF api__celery
    "celery",
    # :: ENDIF
    # :: IF api__channels
    "channels",
    # :: ENDIF
    # :: IF api__wagtail
    "wagtail",
    # :: ENDIF
    # :: IF api__wsgi
    "gunicorn",
    # :: ENDIF
], version = ">=2024.10.0,<2024.11.0"}
drf-spectacular = {extras = ["sidecar"], version = "*"}
# Health check modules
markdown = "*"
networkx = "*"

[tool.poetry.group.dev.dependencies]
black = "*"
isort = "*"
ipython = "*"
django-extensions = "*"
django-debug-toolbar = "*"

[tool.poetry.group.test.dependencies]
node-edge = {version = "^0.1.0b6", allow-prereleases = true}
psutil = "*"
pytest = "*"
pytest-bdd = "*"
pytest-django = "*"
pytest-html = "*"
pytest-playwright = "*"
pyyaml = "*"

[tool.isort]
profile = "black"
known_first_party = "___project_name__snake___"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "___project_name__snake___.django.settings"
python_files = ["test_*.py", "*_test.py"]
django_debug_mode = "keep"
log_cli = true
log_file = "bdd/report/results/test.log"
addopts = ["--output", "bdd/report/results/media", "--screenshot", "on", "--full-page-screenshot", "--video", "on", "--tracing", "retain-on-failure", "--cucumberjson=bdd/report/results/report.json", "--html=bdd/report/results/pytest.html"]

[tool.ruff.lint.per-file-ignores]
"**/bdd/**" = ["ARG001", "S101"]
"test_*.py" = ["ARG001", "S101"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint]
select = [
    # -- Core --
    "E",  # pycodestyle (errors)
    "W",  # pycodestyle (warnings)
    "F",  # Pyflakes
    "I",  # isort
    "C90",  # McCabe Complexity
    "D1",  # Mandatory docstrings
    "S",  # Bandit

    # -- Bonus --
    "A",  # flake8-bugbear
    "B",  # flake8-bugbear
    "DTZ",  # date/time zone
    "T10",  # debugger
    "EM",  # error messages
    "EXE",  # executable
    "G",  # logging
    "UP",  # pyupgrade
    "ASYNC",  # async
    "INP",  # PEP 420
    "T20",  # no print
    "PT",  # pytest
    "SLOT",  # slots
    "TCH",  # type checking blocks
    "PTH",  # Use pathlib
    "FIX",  # Don't allow not done stuff in code
    "ERA",  # Don't comment code
    "RUF",  # Ruff stuff
    "TID251",  # Banned imports (See below)
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"requests".msg = "Use `httpx` instead, which has timeouts by default."

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
